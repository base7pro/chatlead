"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.toUrl = exports.toRelativeUrl = exports.getNumericParam = exports.setParamIfUndefined = exports.setParamIfDefined = exports.roundIfNumeric = void 0;
const roundIfNumeric = (value) => {
    if (!value) {
        return value;
    }
    const num = Number(value);
    return isNaN(num) ? value : Math.round(num);
};
exports.roundIfNumeric = roundIfNumeric;
const setParamIfDefined = (url, key, value, deleteExisting, roundValue) => {
    if (value) {
        if (roundValue) {
            value = (0, exports.roundIfNumeric)(value);
        }
        url.searchParams.set(key, value.toString());
    }
    else if (deleteExisting) {
        url.searchParams.delete(key);
    }
};
exports.setParamIfDefined = setParamIfDefined;
const setParamIfUndefined = (url, key, value) => {
    if (!url.searchParams.has(key)) {
        url.searchParams.set(key, value.toString());
    }
};
exports.setParamIfUndefined = setParamIfUndefined;
const getNumericParam = (url, key) => {
    const value = Number(url.searchParams.get(key));
    return isNaN(value) ? undefined : value;
};
exports.getNumericParam = getNumericParam;
const toRelativeUrl = (url) => {
    const { pathname, search } = url;
    return `${pathname}${search}`;
};
exports.toRelativeUrl = toRelativeUrl;
const toUrl = (url, base) => {
    return typeof url === "string" ? new URL(url, base ?? "http://n/") : url;
};
exports.toUrl = toUrl;
