import { getImageCdnForUrl } from "./detect.js";
import { transform as contentful } from "./transformers/contentful.js";
import { transform as builder } from "./transformers/builder.js";
import { transform as imgix } from "./transformers/imgix.js";
import { transform as shopify } from "./transformers/shopify.js";
import { transform as wordpress } from "./transformers/wordpress.js";
import { transform as cloudinary } from "./transformers/cloudinary.js";
import { transform as cloudflare } from "./transformers/cloudflare.js";
import { transform as bunny } from "./transformers/bunny.js";
import { transform as storyblok } from "./transformers/storyblok.js";
import { transform as kontentai } from "./transformers/kontentai.js";
import { transform as vercel } from "./transformers/vercel.js";
import { transform as nextjs } from "./transformers/nextjs.js";
import { transform as scene7 } from "./transformers/scene7.js";
import { transform as keycdn } from "./transformers/keycdn.js";
import { transform as directus } from "./transformers/directus.js";
import { transform as imageengine } from "./transformers/imageengine.js";
import { transform as contentstack } from "./transformers/contentstack.js";
import { transform as cloudflareImages } from "./transformers/cloudflareimages.js";
import { getCanonicalCdnForUrl } from "./canonical.js";
export const getTransformer = (cdn) => ({
    imgix,
    contentful,
    "builder.io": builder,
    shopify,
    wordpress,
    cloudinary,
    bunny,
    storyblok,
    cloudflare,
    vercel,
    nextjs,
    scene7,
    "kontent.ai": kontentai,
    keycdn,
    directus,
    imageengine,
    contentstack,
    "cloudflare_images": cloudflareImages,
}[cdn]);
/**
 * Returns a transformer function if the given CDN is supported
 */
export const getTransformerForCdn = (cdn) => {
    if (!cdn) {
        return undefined;
    }
    return getTransformer(cdn);
};
/**
 * Transforms an image URL to a new URL with the given options.
 * If the URL is not from a known image CDN it returns undefined.
 */
export const transformUrl = (options) => {
    const cdn = options?.cdn ?? getImageCdnForUrl(options.url);
    // Default to recursive
    if (!(options.recursive ?? true)) {
        return getTransformerForCdn(cdn)?.(options);
    }
    const canonical = getCanonicalCdnForUrl(options.url, cdn);
    if (!canonical || !canonical.cdn) {
        return undefined;
    }
    return getTransformer(canonical.cdn)?.({
        ...options,
        url: canonical.url,
    });
};
/**
 * Returns a transformer function if the given URL is from a known image CDN
 *
 * @deprecated Use `getCanonicalCdnForUrl` and `getTransformerForCdn` instead
 */
export const getTransformerForUrl = (url) => getTransformerForCdn(getImageCdnForUrl(url));
